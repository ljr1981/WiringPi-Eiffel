note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class WIRINGPI_FUNCTIONS_API


feature -- Access

	wiring_pi_failure (fatal: INTEGER; message: POINTER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiFailure ((int)$fatal, (char const*)$message);
			]"
		end

	wiring_pi_find_node (pin: INTEGER): POINTER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiFindNode ((int)$pin);
			]"
		end

	wiring_pi_new_node (pinbase: INTEGER; numpins: INTEGER): POINTER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiNewNode ((int)$pinbase, (int)$numpins);
			]"
		end

	wiring_pi_version (major: POINTER; minor: POINTER)
		do
			c_wiring_pi_version (major, minor)
		ensure
			instance_free: class
		end

	wiring_pi_setup: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiSetup ();
			]"
		end

	wiring_pi_setup_sys: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiSetupSys ();
			]"
		end

	wiring_pi_setup_gpio: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiSetupGpio ();
			]"
		end

	wiring_pi_setup_phys: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiSetupPhys ();
			]"
		end

	pin_mode_alt (pin: INTEGER; mode: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pinModeAlt ((int)$pin, (int)$mode);
			]"
		end

	pin_mode (pin: INTEGER; mode: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pinMode ((int)$pin, (int)$mode);
			]"
		end

	pull_up_dn_control (pin: INTEGER; pud: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pullUpDnControl ((int)$pin, (int)$pud);
			]"
		end

	digital_read (pin: INTEGER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return digitalRead ((int)$pin);
			]"
		end

	digital_write (pin: INTEGER; value: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				digitalWrite ((int)$pin, (int)$value);
			]"
		end

--	digital_read8 (pin: INTEGER): INTEGER
--		external
--			"C inline use <wiringPi.h>"
--		alias
--			"[
--				return digitalRead8 ((int)$pin);
--			]"
--		end

--	digital_write8 (pin: INTEGER; value: INTEGER)
--		external
--			"C inline use <wiringPi.h>"
--		alias
--			"[
--				digitalWrite8 ((int)$pin, (int)$value);
--			]"
--		end

	pwm_write (pin: INTEGER; value: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pwmWrite ((int)$pin, (int)$value);
			]"
		end

	analog_read (pin: INTEGER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return analogRead ((int)$pin);
			]"
		end

	analog_write (pin: INTEGER; value: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				analogWrite ((int)$pin, (int)$value);
			]"
		end

--	wiring_pi_setup_pi_face: INTEGER
--		external
--			"C inline use <wiringPi.h>"
--		alias
--			"[
--				return wiringPiSetupPiFace ();
--			]"
--		end

--	wiring_pi_setup_pi_face_for_gpio_prog: INTEGER
--		external
--			"C inline use <wiringPi.h>"
--		alias
--			"[
--				return wiringPiSetupPiFaceForGpioProg ();
--			]"
--		end

	pi_gpio_layout: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return piGpioLayout ();
			]"
		end

	pi_board_rev: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return piBoardRev ();
			]"
		end

	pi_board_id (model: POINTER; rev: POINTER; mem: POINTER; maker: POINTER; overvolted: POINTER)
		do
			c_pi_board_id (model, rev, mem, maker, overvolted)
		ensure
			instance_free: class
		end

	wpi_pin_to_gpio (wpipin: INTEGER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wpiPinToGpio ((int)$wpipin);
			]"
		end

	phys_pin_to_gpio (physpin: INTEGER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return physPinToGpio ((int)$physpin);
			]"
		end

	set_pad_drive (group: INTEGER; value: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				setPadDrive ((int)$group, (int)$value);
			]"
		end

	get_alt (pin: INTEGER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return getAlt ((int)$pin);
			]"
		end

	pwm_tone_write (pin: INTEGER; freq: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pwmToneWrite ((int)$pin, (int)$freq);
			]"
		end

	pwm_set_mode (mode: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pwmSetMode ((int)$mode);
			]"
		end

	pwm_set_range (range: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pwmSetRange ((unsigned int)$range);
			]"
		end

	pwm_set_clock (divisor: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				pwmSetClock ((int)$divisor);
			]"
		end

	gpio_clock_set (pin: INTEGER; freq: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				gpioClockSet ((int)$pin, (int)$freq);
			]"
		end

	digital_read_byte: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return digitalReadByte ();
			]"
		end

	digital_read_byte2: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return digitalReadByte2 ();
			]"
		end

	digital_write_byte (value: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				digitalWriteByte ((int)$value);
			]"
		end

	digital_write_byte2 (value: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				digitalWriteByte2 ((int)$value);
			]"
		end

	wait_for_interrupt (pin: INTEGER; ms: INTEGER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return waitForInterrupt ((int)$pin, (int)$ms);
			]"
		end

	wiring_pi_isr (pin: INTEGER; mode: INTEGER; function: POINTER): INTEGER
		do
			Result := c_wiring_pi_isr (pin, mode, function)
		ensure
			instance_free: class
		end

	pi_thread_create (fn: POINTER): INTEGER
		do
			Result := c_pi_thread_create (fn)
		ensure
			instance_free: class
		end

	pi_lock (key: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				piLock ((int)$key);
			]"
		end

	pi_unlock (key: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				piUnlock ((int)$key);
			]"
		end

	pi_hi_pri (pri: INTEGER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return piHiPri ((int const)$pri);
			]"
		end

	delay (howlong: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				delay ((unsigned int)$howlong);
			]"
		end

	delay_microseconds (howlong: INTEGER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				delayMicroseconds ((unsigned int)$howlong);
			]"
		end

	millis: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return millis ();
			]"
		end

	micros: INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return micros ();
			]"
		end

feature -- Externals

	c_wiring_pi_version (major: POINTER; minor: POINTER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				wiringPiVersion ((int*)$major, (int*)$minor);
			]"
		end

	c_pi_board_id (model: POINTER; rev: POINTER; mem: POINTER; maker: POINTER; overvolted: POINTER)
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				piBoardId ((int*)$model, (int*)$rev, (int*)$mem, (int*)$maker, (int*)$overvolted);
			]"
		end

	c_wiring_pi_isr (pin: INTEGER; mode: INTEGER; function: POINTER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return wiringPiISR ((int)$pin, (int)$mode, (void (*) ())$function);
			]"
		end

	c_pi_thread_create (fn: POINTER): INTEGER
		external
			"C inline use <wiringPi.h>"
		alias
			"[
				return piThreadCreate ((void *(*) (void *anonymous_1))$fn);
			]"
		end

feature -- Externals Address

end
